# This is a sample configuration file for the oneroster connector type.
#
# OneRoster is the standard specification for securely sharing class rosters and related data,
# between a student information system (SIS) and any other system.
#
# This sample file contains all of the settable options for this protocol.
# It is recommended that you make a copy of this file and edit it for your needs.
# While you are at it, you will likely want to remove a lot of this  commentary,
# in order to enhance the readability of your file.

# connection settings (required)
# SHA-256 signing mechanism required

# Host name for organization's OneRoster implementation, eg: https://mockroster.io
host: "https://mockroster.io/"

#User's credentials to access protected API endpoints
client_id: 'oruser'
client_secret: 'secret'



#When using oAuth 2 Bearer Tokens, available with OneRoster 1.1:
#oAuth2 endpoint

api_token_endpoint: "https://mockroster.io/oauth/token"

#If using basic header authentication, must change this value to True
basic_header: 'False'








# Unique key used throughout One-Roster (sourcedId is commonly used)
key_identifier: 'sourcedId'

# Country Code that will be associated with
country_code: 'US'

authentication: 'Oauth2'

#(optional) Additional One Roster User information (source_attributes), that can be used to create final user object.
# attributes will be used and manipulated within the extension-config.yml file



# (optional) string_encoding (default value given below)
# string_encoding specifies the Unicode string encoding used by the directory.
# All values retrieved from the directory are converted to Unicode before being
# sent to or compared with values on the Adobe side, to avoid encoding issues.
# The value must be a Python codec name or alias, such as 'latin1' or 'big5'.
# See https://docs.python.org/2/library/codecs.html#standard-encodings for details.
#string_encoding: utf8



# (optional) user_email_format (default value given below)
# user_email_format specifies how to construct a user's email address by
# combining constant strings with the values of specific Okta profile attributes.
# Any names in curly braces are taken as attribute names, and everything including
# the braces will be replaced on a per-user basis with the values of the attributes.
# The default value is from "email" field in Okta user profile.
# NOTE: for this and every format setting, the constant strings must be in
# the encoding specified by the string_encoding setting, above.
#user_email_format: "{email}"

# (optional) user_domain_format (no default value)
# user_domain_format is analogous to user_email_format in syntax, but it
# is used to discover the domain for a given user.  If not specified, the
# domain is taken from the domain part of the user's email address.
#user_domain_format: "{domain}"

# (optional) user_username_format (no default value)
# user_username_format specifies how to construct a user's username on the
# Adobe side by combining constant strings with attribute values.
# Any names in curly braces are taken as attribute names, and everything including
# the braces will be replaced on a per-user basis with the values of the attributes.
# This setting should only be used when you are using federatedID and your
# federation configuration specifies username-based login.  In all other cases,
# make sure this is not set or returns an empty value, and the user's username
# will be taken from the user's email.
# This example supposes that the department and user_id are concatenated to
# produce a unique username for each user.
#user_username_format: "{department}_{user_id}"

# (optional) user_given_name_format (default value given below)
# user_given_name_format specifies how to construct a user's given name by
# combining constant strings with the values of specific Okta profile attributes.
# Any names in curly braces are taken as attribute names, and everything including
# the braces will be replaced on a per-user basis with the values of the attributes.
# The default value is from "firstName" field in Okta user profile..
# NOTE: for this and every format setting, the constant strings must be in
# the encoding specified by the string_encoding setting, above.
#user_given_name_format: "{firstName}"

# (optional) user_surname_format (default value given below)
# user_surname_format specifies how to construct a user's surname by
# combining constant strings with the values of specific Okta profile attributes.
# Any names in curly braces are taken as attribute names, and everything including
# the braces will be replaced on a per-user basis with the values of the attributes.
# The default value is from "lastName" field in Okta user profile.
# NOTE: for this and every format setting, the constant strings must be in
# the encoding specified by the string_encoding setting, above.
#user_surname_format: "{lastName}"

# (optional) user_country_code_format (default value given below)
# user_country_code_format specifies how to construct a user's country code by
# combining constant strings with the values of specific Okta profile attributes.
# Any names in curly braces are taken as attribute names, and everything including
# the braces will be replaced on a per-user basis with the values of the attributes.
# The default value is from "countryCode" field in Okta user profile.
# NOTE: for this and every format setting, the constant strings must be in
# the encoding specified by the string_encoding setting, above.
#user_country_code_format: "{countryCode}"

