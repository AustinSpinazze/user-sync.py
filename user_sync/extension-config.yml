# This is a sample configuration file for a user extension.
#
# This file extends the behavior specified in your main configuration file,
# by adding custom python code to the logic for attribute and group mapping
# which is specified in the directory_users section.
#
# To load your extension file, put the file's relative or absolute path
# as the value of the extension setting in the directory_users section
# of your main configuration file.

# (optional) extended_attributes (default value is an empty list)
# extended_attributes is a list of attribute names whose per-user
# values are required by your extension in order to function properly.
# These attributes will be read on a per-user basis, and will be available
# in the source_attributes dictionary in your after_mapping_hook.  Any
# of these attributes which don't have a value in the directory entry for
# a given user will have a Python None value in that user's dictionary.

extended_adobe_groups: []
extended_attributes:
  - proxyAddresses



after_mapping_hook: |
  import re
  if source_attributes.get('proxyAddresses') is not None:
    #p = re.compile('(\d|\w|[-\._])*(@).*(\.)(\d|\w)*')
    p = re.compile('(\d|\w|[-\._])*(@perficientads.com)')
    proxyAddresses = source_attributes.get('proxyAddresses')
    proxyAddresses = proxyAddresses if isinstance(proxyAddresses, list) else [proxyAddresses]

    results = list(filter(p.match, proxyAddresses))

    if len(results) > 0:
      print('Using proxy address for: ', source_attributes.get('email'))
      print(results[0])
      target_attributes['email'] = results[0]
      target_attributes['username'] = results[0]

#    for address in proxyAddresses:
#      matchObj = re.search(p, address)
#      if matchObj:
#        print(matchObj.group())

#  # source_country = source_attributes.get('c')
#  # source_city = source_attributes.get('l')
#  # mapped_country = city_map.get(source_city)
#  # if not source_country and mapped_country:
#    # target_attributes['country'] = mapped_country

# (optional) extended_adobe_groups (default value is an empty list)
# extended_adobe_groups is a list of Adobe-side product configuration
# and/or user group names, exactly like those found in the groups
# setting in the main configuration file.  Your after_mapping_hook
# can add users to any product configuration or user group found here
# as well as any found in the groups setting, and the effect of the
# --process-groups argument will treat them exactly as if the
# extended mapping had been specified as part of the groups setting.


# (required) after_mapping_hook
# This is where you specify your Python hook code.  Note the vertical bar
# after the after_mapping_hook label: this vertical bar is required and
# denotes that all the following indented lines up to the next blank
# line are part of a code block.  Do not have blank lines in your code block.
#
# after_mapping_hook code executes in a scope containing the following variables:
#
#     source_attributes   # in: attributes retrieved from customer directory system (eg 'c', 'givenName')
#                         # out: N/A
#     source_groups       # in: customer-side directory groups found for user
#                         # out: N/A
#     target_attributes   # in: user's attributes for UMAPI calls as defined by usual rules (eg 'country', 'firstname')
#                         # out: user's attributes for UMAPI calls as potentially changed by hook code
#     target_groups       # in: Adobe-side dashboard groups mapped for user by usual rules
#                         # out: Adobe-side dashboard groups as potentially changed by hook code
#     hook_storage        # for exclusive use by hook code: initialized to None; persists across per-user calls
#     logger              # an object of type logging.logger which outputs to the console and/or file log
#

